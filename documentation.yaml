openapi: 3.0.0
info:
  title: API Specification
  version: v1
paths:
  /api/products:
    get:
      summary: Retrieve a list of all products.
      tags:
        - Products
    post:
      summary: Create a new product.
      tags:
        - Products
      parameters:
        - name: product_name
          in: query
          description: Name of the product.
          required: false
        - name: price
          in: query
          description: Price of the product.
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/Product'
  /api/users:
    get:
      summary: Retrieve a list of all users.
      tags:
        - Users
    post:
      summary: Create a new user.
      tags:
        - Users
      parameters:
        - name: username
          in: query
          description: Username of the user.
          required: false
        - name: password
          in: query
          description: Password of the user.
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
  /api/products/{id}:
    get:
      summary: Retrieve a product by ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
      responses:
        '200':
          description: Product retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/definitions/Product'
        '404':
          description: Product not found.
    put:
      summary: Update a product by ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/Product'
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/definitions/Product'
        '404':
          description: Product not found.
    delete:
      summary: Delete a product by ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: ID of the product.
          required: true
      responses:
        '204':
          description: Product deleted successfully.
        '404':
          description: Product not found.
  /api/users/{id}:
    get:
      summary: Retrieve a user by ID.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of the user.
          required: true
      responses:
        '200':
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '404':
          description: User not found.
    put:
      summary: Update a user by ID.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of the user.
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/definitions/User'
        '404':
          description: User not found.
    delete:
      summary: Delete a user by ID.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of the user.
          required: true
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
  /products:
    get:
      summary: Retrieve a list of products. Can be filtered by category, min and max prices.
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter products by category
        - name: minPrice
          in: query
          schema:
            type: number
          description: Minimum price filter
        - name: maxPrice
          in: query
          schema:
            type: number
          description: Maximum price filter
    post:
      summary: Create a new product.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  description: Product price
                stock:
                  type: integer
                  description: Product stock quantity
  /products/{id}:
    get:
      summary: Retrieve a single product by ID.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          description: Product ID
    put:
      summary: Update an existing product.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          description: Product ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  description: Product price
                stock:
                  type: integer
                  description: Product stock quantity
    delete:
      summary: Delete a product by ID.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          description: Product ID
  /users:
    get:
      summary: Retrieve a list of all users with minimal information.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                  required:
                    - id
                    - username
                    - email
  /users/{id}:
    get:
      summary: Retrieve the profile information of a user.
      parameters:
        - name: id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                required:
                  - id
                  - username
                  - email
  /users/register:
    post:
      summary: Create a new user account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: Newly created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                required:
                  - id
                  - username
                  - email
  /users/{id}/cart:
    post:
      summary: Add a product to the cart of a user.
      parameters:
        - name: id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: integer
        - name: productId
          in: body
          description: Product ID to add
          required: true
          schema:
            type: string
        - name: quantity
          in: body
          description: Quantity of the product to add
          schema:
            type: integer
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
              required:
                - productId
                - quantity
      responses:
        '200':
          description: Updated cart contents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: string
                    quantity:
                      type: integer
                  required:
                    - productId
                    - quantity
  /users/{id}/checkout:
    post:
      summary: Create a new order and clear the cart of a user.
      parameters:
        - name: id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Newly created order
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  items:
                    type: array
                  date:
                    type: string
                  total:
                    type: number
                required:
                  - id
                  - items
                  - date

definitions:
  Product:
    type: object
  User:
    type: object
