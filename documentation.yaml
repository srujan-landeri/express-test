openapi: 3.0.0
paths:
  /api/products:
    get:
      summary: Retrieve a list of all products
      tags:
        - Products
  /api/users:
    get:
      summary: Retrieve a list of all users with optional pagination parameters
      tags:
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
    post:
      summary: Create a new user
      tags:
        - Users
      parameters:
        - in: query
          name: username
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
  /api/products/{id}:
    get:
      summary: Retrieve a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
    put:
      summary: Update a product
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: body
          name: product
          schema:
            $ref: '#/definitions/Product'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/Product'
    delete:
      summary: Delete a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
  /api/users/{id}:
    get:
      summary: Retrieve a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
    put:
      summary: Update a user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: body
          name: user
          schema:
            $ref: '#/definitions/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/User'
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
  /products:
    get:
      summary: Retrieve a list of all products or filtered by category and price range.
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
    post:
      summary: Create a new product with the specified name, price, and stock quantity.
      parameters:
        - in: query
          name: stock
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  required: true
                price:
                  type: number
                  required: true
  /products/{id}:
    get:
      summary: Retrieve a single product by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
    put:
      summary: Update the specified product with the new name and price.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
    delete:
      summary: Delete the specified product.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
  /users:
    get:
      summary: Retrieve a list of users with minimal information for security.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                required:
                  - id
                  - username
                  - email
  /users/{id}:
    get:
      summary: Retrieve a user's profile by ID, removing sensitive information.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                required:
                  - password
                  - id
                  - username
                  - email
  /users/register:
    post:
      summary: Create a new user with basic validation.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  password:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                required:
                  - password
                  - id
                  - username
                  - email
  /users/{id}/cart:
    post:
      summary: Add an item to the cart for a specific user.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
              required:
                - productId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: integer
                    quantity:
                      type: integer
  /users/{id}/checkout:
    post:
      summary: Create a new order for a specific user after checking out.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
              required:
                - productId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: integer
                        quantity:
                          type: integer
                  date:
                    type: string
                  total:
                    type: number
                required:
                  - id
                  - items
                  - date
                  - total
definitions:
  User:
    type: object
  Product:
    type: object

