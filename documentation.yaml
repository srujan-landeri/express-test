openapi: 3.0.0
info:
  title: API Specification
  version: v1
paths:
  /api/products:
    get:
      summary: Retrieve a list of products
      description: Retrieve a list of products. You can filter by ID or use pagination to retrieve multiple pages of results.
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          description: Product ID
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
    post:
      summary: Create a new product
      description: Create a new product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                price:
                  type: number
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
  /api/products/{id}:
    get:
      summary: Retrieve a product by ID
      description: Retrieve a product by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  price:
                    type: number
        '404':
          description: Product not found
  /api/users:
    get:
      summary: Retrieve a list of users
      description: Retrieve a list of users.
    post:
      summary: Create a new user
      description: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
  /api/users/{id}:
    get:
      summary: Retrieve a user by ID
      description: Retrieve a user by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      description: Update a user by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      description: Delete a user by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  /products:
    get:
      summary: Retrieve a list of products
      description: Retrieve a list of products. Optionally filter by category and/or price range.
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price filter
    post:
      summary: Create a new product
      description: Create a new product. Optionally filter products by category and/or price range.
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price filter
  /products/{id}:
    get:
      summary: Retrieve a single product by ID
      description: Retrieve a single product by ID. Optionally filter by category and/or price range.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price filter
    put:
      summary: Update an existing product
      description: Update an existing product. Optionally filter products by category and/or price range.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price filter
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price filter
    delete:
      summary: Delete a product by ID
      description: Delete a product by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
  /users:
    get:
      summary: Retrieve a list of all users
      description: Retrieve a list of all users with minimal information for security.
  /users/{id}:
    get:
      summary: Retrieve user profile by ID
      description: Retrieve the user profile by ID, removing sensitive information such as password.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
  /register:
    post:
      summary: Create a new user
      description: Create a new user with the provided username, email, and password. Note: In a real app, this would be hashed.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
  /users/{id}/cart:
    post:
      summary: Add product to cart
      description: Add a product to the cart for the specified user.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
  /users/{id}/checkout:
    post:
      summary: Create new order
      description: Create a new order for the specified user and clear their cart.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID

