openapi: 3.0.0
info:
  title: API Specification
  version: v1
paths:
  /api/products:
    get:
      summary: Retrieve a list of all products in the inventory.
      tags:
        - products
        - inventory
    post:
      summary: Create a new product in the inventory.
      tags:
        - products
        - inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /api/products/{id}:
    get:
      summary: Retrieve a specific product by its ID.
      tags:
        - products
        - inventory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the product to retrieve.
    put:
      summary: Update an existing product in the inventory.
      tags:
        - products
        - inventory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the product to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product from the inventory.
      tags:
        - products
        - inventory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the product to delete.
  /api/users:
    get:
      summary: Retrieve a list of all registered users.
      tags:
        - users
        - authentication
    post:
      summary: Create a new registered user.
      tags:
        - users
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{id}:
    get:
      summary: Retrieve a specific user by its ID.
      tags:
        - users
        - authentication
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
    put:
      summary: Update an existing registered user.
      tags:
        - users
        - authentication
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a registered user.
      tags:
        - users
        - authentication
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the user to delete.
  /api/login:
    post:
      summary: Login to the system.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /products:
    get:
      summary: Retrieve a list of products matching the specified filters
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category
        - in: query
          name: minPrice
          schema:
            type: integer
          description: Filter products by minimum price (integer)
        - in: query
          name: maxPrice
          schema:
            type: integer
          description: Filter products by maximum price (integer)
    post:
      summary: Create a new product and add it to the catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      summary: Retrieve a single product by its ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
    put:
      summary: Update a product by its ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product by its ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Product ID
  /users:
    get:
      summary: Retrieve a list of all users with minimal information.
      tags:
        - users
        - orders
      responses:
        '200':
          description: List of users with id, username, and email.
  /users/{id}:
    get:
      summary: Retrieve a user's profile with minimal sensitive information.
      tags:
        - users
        - orders
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID to retrieve.
      responses:
        '200':
          description: User's profile with id, username, and email.
        '404':
          description: User not found.
  /users/register:
    post:
      summary: Register a new user.
      tags:
        - users
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        '201':
          description: New user created with minimal information.
        '400':
          description: Invalid request (missing required fields or existing user).
  /users/{id}/cart:
    post:
      summary: Add an item to the user's cart.
      tags:
        - users
        - orders
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID.
        - in: body
          name: productId
          schema:
            type: integer
          required: true
          description: Product ID to add to cart.
        - in: body
          name: quantity
          schema:
            type: integer
          description: Quantity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
      responses:
        '201':
          description: Item added to cart.
  /users/{id}/checkout:
    post:
      summary: Create a new order for the user's cart.
      tags:
        - users
        - orders
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID.
      requestBody:
        required: false
        content: {}
      responses:
        '201':
          description: New order created.
        '400':
          description: Invalid request (cart is empty).

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the product.
        name:
          type: string
          description: The name of the product.
        price:
          type: number
          format: float
          description: The price of the product.
      required:
        - id
        - name
        - price
    User:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the user.
        username:
          type: string
          description: The username of the user.
        password:
          type: string
          description: The password of the user.
      required:
        - id
        - username
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: The authentication token.
      required:
        - token
    LoginCredentials:
      type: object
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: Password
      required:
        - username
        - password

